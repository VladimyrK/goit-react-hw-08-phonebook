{"version":3,"file":"static/js/609.b49ee637.chunk.js","mappings":"6QA6DA,MAtDA,YAAoC,IAAbA,EAAY,EAAZA,SAmBrB,OACE,kBAAMA,SAAUA,EAAhB,WACE,qCAEE,kBACEC,KAAK,OACLC,KAAK,OAGLC,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,QAGZ,uCAEE,kBACEJ,KAAK,MACLC,KAAK,QAGLC,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,QAGZ,gDCtBN,MAtBA,YAA+C,IAApBC,EAAmB,EAAnBA,GAAIC,EAAe,EAAfA,MAAOL,EAAQ,EAARA,KAEpC,GAAqBM,EAAAA,EAAAA,MAAdC,GAAP,eAEA,OACE,2BACE,yBACGP,EADH,KACWK,MAEX,mBAAQN,KAAK,SAASS,QAAS,kBAAMD,EAAWH,IAAhD,wBCEN,EAdoB,SAAC,GAAe,IAAbK,EAAY,EAAZA,MACrB,OACE,wBACGA,EAAMC,KAAI,gBAAGN,EAAH,EAAGA,GAAIJ,EAAP,EAAOA,KAAMK,EAAb,EAAaA,MAAb,OACT,SAAC,EAAD,CAA0BD,GAAIA,EAAIJ,KAAMA,EAAMK,MAAOA,GAA/BD,SCS9B,EAde,SAAC,GAAyB,IAAvBO,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACvB,OACE,sDAEE,kBAAOb,KAAK,OAAOC,KAAK,SAASW,MAAOA,EAAOE,SAAUD,QCkD/D,MA9CA,WACE,IAAcE,GAAaC,EAAAA,EAAAA,MAAnBC,KACR,GAAwBC,EAAAA,EAAAA,MAAjBC,GAAP,eACMC,GAASC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMF,OAAOA,UAC3CG,GAAWC,EAAAA,EAAAA,MAEXC,EAAY,mCAAG,WAAMC,GAAN,iEACnBA,EAAEC,iBACFR,EAAc,CACZO,EAAEE,cAAcC,SAAS5B,KAAKW,MAC9Bc,EAAEE,cAAcC,SAASvB,MAAMM,QAEjCc,EAAEE,cAAcE,QAEhBC,EAAAA,GAAAA,QAAc,0FARK,2CAAH,sDAuBZC,EAZiB,WACrB,IAAMC,EAAoBb,EAAOc,cAE7BF,EAAmB,GAMvB,OALIjB,IACFiB,EAAmBjB,EAASK,QAAO,SAAAe,GAAO,OACxCA,EAAQlC,KAAKiC,cAAcE,SAASH,OAGjCD,EAGgBK,GAEzB,OACE,iBAAKC,UAAU,MAAf,WACE,uCACA,SAAC,EAAD,CAAavC,SAAU0B,KACvB,sCACA,SAAC,EAAD,CACEb,MAAOQ,EACPP,SAAU,SAAAa,GAAC,OAAIH,GAASgB,EAAAA,EAAAA,IAAUb,EAAEE,cAAchB,WAEnDG,IAAY,SAAC,EAAD,CAAaL,MAAOsB,KACjC,SAAC,KAAD,CAASQ,SAAS","sources":["components/Contacts/ContactForm/ContactForm.js","components/Contacts/ContactListItem/ContactListItem.js","components/Contacts/ContactList/ContactList.js","components/Contacts/Filter/Filter.js","pages/ContactsPage.jsx"],"sourcesContent":["// import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\n// import { nanoid } from 'nanoid';\n\nimport './ContactForm.module.css';\n\nfunction ContactForm({ onSubmit }) {\n  // const [name, setName] = useState('');\n  // const [number, setNumber] = useState('');\n  // const [id, setId] = useState(() => nanoid());\n\n  // const handleSubmit = e => {\n  //   e.preventDefault();\n\n  //   setId(nanoid());\n  //   onSubmit({ name, number, id });\n  //   reset();\n  // };\n\n  // const reset = () => {\n  //   setName('');\n  //   setNumber('');\n  //   setId(nanoid());\n  // };\n\n  return (\n    <form onSubmit={onSubmit}>\n      <label>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          // value={name}\n          // onChange={e => setName(e.currentTarget.value)}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n      <label>\n        Number\n        <input\n          type=\"tel\"\n          name=\"phone\"\n          // value={number}\n          // onChange={e => setNumber(e.currentTarget.value)}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n      <button>Add contact</button>\n    </form>\n  );\n}\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func,\n};\n\nexport default ContactForm;\n","import PropTypes from 'prop-types';\n// import { useDispatch } from 'react-redux';\n\n// import { deleteContact } from '../../../redux/contactsSlice';\nimport { useDeleteContactMutation } from '../../../redux/contactsSlice';\n\nimport './ContactListItem.module.css';\n\nfunction ContactListItem({ id, phone, name }) {\n  // const dispatch = useDispatch();\n  const [deleteTodo] = useDeleteContactMutation();\n\n  return (\n    <li>\n      <p>\n        {name}: {phone}\n      </p>\n      <button type=\"button\" onClick={() => deleteTodo(id)}>\n        Delete\n      </button>\n    </li>\n  );\n}\n\nContactListItem.propTypes = {\n  id: PropTypes.string,\n  phone: PropTypes.string,\n  number: PropTypes.string,\n};\n\nexport default ContactListItem;\n","import PropTypes from 'prop-types';\n\nimport ContactListItem from '../ContactListItem';\nimport './ContactList.module.css';\n\nconst ContactList = ({ items }) => {\n  return (\n    <ul>\n      {items.map(({ id, name, phone }) => (\n        <ContactListItem key={id} id={id} name={name} phone={phone} />\n      ))}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string)),\n};\n\nexport default ContactList;\n","import PropTypes from 'prop-types';\n\nimport './Filter.module.css';\n\nconst Filter = ({ value, onFilter }) => {\n  return (\n    <label>\n      Find contacts by name\n      <input type=\"text\" name=\"filter\" value={value} onChange={onFilter} />\n    </label>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onFilter: PropTypes.func,\n};\n\nexport default Filter;\n","import { useSelector, useDispatch } from 'react-redux';\nimport {\n  useFetchContactsQuery,\n  useCreateContactMutation,\n} from '../redux/contactsSlice';\nimport { addFilter } from '../redux/filterSlice';\nimport { toast, Toaster } from 'react-hot-toast';\n\nimport ContactForm from '../components/Contacts/ContactForm';\nimport ContactList from '../components/Contacts/ContactList';\nimport Filter from '../components/Contacts/Filter';\n\nfunction ContactsPage() {\n  const { data: contacts } = useFetchContactsQuery();\n  const [createContact] = useCreateContactMutation();\n  const filter = useSelector(state => state.filter.filter);\n  const dispatch = useDispatch();\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    createContact([\n      e.currentTarget.elements.name.value,\n      e.currentTarget.elements.phone.value,\n    ]);\n    e.currentTarget.reset();\n\n    toast.success('Заметка создана!');\n  };\n\n  const filterContacts = () => {\n    const filterToLowerCase = filter.toLowerCase();\n\n    let filteredContacts = [];\n    if (contacts) {\n      filteredContacts = contacts.filter(contact =>\n        contact.name.toLowerCase().includes(filterToLowerCase)\n      );\n    }\n    return filteredContacts;\n  };\n\n  const filteredContacts = filterContacts();\n\n  return (\n    <div className=\"App\">\n      <h1>Phonebook</h1>\n      <ContactForm onSubmit={handleSubmit} />\n      <h2>Contacts</h2>\n      <Filter\n        value={filter}\n        onFilter={e => dispatch(addFilter(e.currentTarget.value))}\n      />\n      {contacts && <ContactList items={filteredContacts} />}\n      <Toaster position=\"top-center\" />\n    </div>\n  );\n}\n\nexport default ContactsPage;\n"],"names":["onSubmit","type","name","pattern","title","required","id","phone","useDeleteContactMutation","deleteTodo","onClick","items","map","value","onFilter","onChange","contacts","useFetchContactsQuery","data","useCreateContactMutation","createContact","filter","useSelector","state","dispatch","useDispatch","handleSubmit","e","preventDefault","currentTarget","elements","reset","toast","filteredContacts","filterToLowerCase","toLowerCase","contact","includes","filterContacts","className","addFilter","position"],"sourceRoot":""}